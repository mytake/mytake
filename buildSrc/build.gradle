apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-gradle-plugin'

repositories {
	maven { url 'https://plugins.gradle.org/m2/' }
	maven { url 'https://dl.bintray.com/palantir/releases' }
	maven { url 'http://repository.jsweet.org/artifactory/libs-release-local' }
}

dependencies {
	// https://github.com/srs/gradle-node-plugin
	compile 'com.moowork.gradle:gradle-node-plugin:1.2.0'
	// https://github.com/palantir/docker-compose-rule
	compile 'com.palantir.docker.compose:docker-compose-rule-core:0.33.0'
	compile 'com.palantir.docker.compose:docker-compose-rule-junit4:0.33.0'
	compile 'org.postgresql:postgresql:42.2.2'
	// jooq codegen
	compile 'org.jooq:jooq-codegen:3.10.2'
	// db migration
	compile 'org.flywaydb:flyway-core:5.0.7'
	// jsweet ts2java
	compile 'com.jsoniter:jsoniter:0.9.23'
	compile 'org.jsweet:jsweet-transpiler:2.0.1'
	compile files("${System.properties['java.home']}/../lib/tools.jar")
	// java8 utilities
	compile 'com.diffplug.durian:durian-core:1.2.0'
}

// if we're not in CI, grab all source
String HEROKU_ENV_VAR = 'STACK'  // https://devcenter.heroku.com/articles/buildpack-api#stacks
String CI_ENV_VAR = 'CI'  // https://circleci.com/docs/1.0/environment-variables/#basics
def keys = System.getenv().keySet()

if (!keys.contains(HEROKU_ENV_VAR) && !keys.contains(CI_ENV_VAR)) {
	// uncomment to generate eclipse project
	// (adds tons of noise to continuous build)
	compileJava.dependsOn(tasks.getByName('eclipse'))
}

eclipse { project { name = 'mytake-buildSrc' } }

gradlePlugin {
	plugins {
		flywayJooqEmbeddedPg {
			id = 'org.mytake.gradle.flywayjooq.embeddedpg'
			implementationClass = 'org.mytake.gradle.flywayjooq.EmbeddedPgPlugin'
		}
		jsoniterCodegen {
			id = 'org.mytake.gradle.jsonitercodegen'
			implementationClass = 'org.mytake.gradle.jsonitercodegen.JsoniterCodegenPlugin'
		}
	}
}

// reproducible buildSrc jar for travis cache
project.tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	dirMode = 0775
	fileMode = 0664
}
