////////////////////////////////////////
// java - gets compiled to typescript //
////////////////////////////////////////
apply plugin: 'java-library'
apply plugin: 'com.diffplug.spotless'
spotless {
	ratchetFrom 'origin/master'
	java {
		target 'src/main/java/java2ts/**'
		licenseHeaderFile(rootProject.file('gradle/spotless-license-agpl.java'))
		importOrder()
		eclipse().configFile(rootProject.file('gradle/spotless.eclipseformat.xml'))
		removeUnusedImports()
	}
	format 'scss', {
		target 'src/main/styles/**/*.scss'
		prettier(VER_PRETTIER)
	}
	format 'typescript', {
		licenseHeaderFile rootProject.file('gradle/spotless-license-agpl.java'), '(import|const|declare|export|var) '
		target 'src/main/scripts/**'
		targetExclude '**/java2ts/**', '**/__snapshots__/**', '**/*.json'
		prettier(VER_PRETTIER)
	}
	format 'js', {
		target 'gulpfile.js'
		prettier(VER_PRETTIER)
	}
}

dependencies {
	api "com.jsoniter:jsoniter:$VER_JSONITER"
	api "org.jsweet:jsweet-core:$VER_JSWEET_CORE"
	testImplementation "junit:junit:$VER_JUNIT"
	testImplementation "org.assertj:assertj-core:$VER_ASSERTJ"
}

// don't setup any of the node stuff if we're just doing the transcriptGui
if (gradle.startParameter.taskNames == [
	'transcriptGui'
]) {
	return
}

// generate typescript for the java in the java2ts folder
def JAVA2TS = 'src/main/scripts/java2ts'
apply plugin: 'org.mytake.gradle.jsweetcodegen'
jsweet {
	targetVersion = 'ES6' // should match gradle.properties VER_JSWEET_CORE
	module = 'commonjs'
	tsOut = file(JAVA2TS)
	tsOnly = true
	factoryClassName = 'org.mytake.gradle.jsweet.JSweetFactoryJsoniterAny'
	includes= [
		'java2ts/**'
	]
}

//////////////
// jsoniter //
//////////////
apply plugin: 'org.mytake.gradle.jsonitercodegen'
jsoniterCodegen { codegenClass = 'java2ts.CodegenConfig' }

///////////////////////////////////////////////////////////////////////
// node stuff - compiles sass and typescript into src/main/resources //
///////////////////////////////////////////////////////////////////////
apply plugin: 'org.mytake.gradle.node'
node {
	setup.nodeVersion = buildsrc.NvmRc.read(file('../.nvmrc'))
	setup.npmVersion = 'provided'

	npmRun('test_ci') {
		dependsOn('jsweet')
		inputs.dir('src/main/scripts')
		outputs.dir('build/test-results/jest')
	}

	// every gulp task automatically installs from package-lock.json using 'npm ci'
	// and adds that and gulpfile.js as input files
	gulp 'permanent', {
		inputs.dir('src/main/permanent').withPathSensitivity(PathSensitivity.RELATIVE)
		outputs.dir('src/main/resources/assets/permanent')
		// technically it's that scriptsDev and scriptsProd depend on jsweet, but it's easier to put it here
		dependsOn('jsweet')
	}
	for (t in [
		'styles',
		'scripts'
	]) {
		final String taskName = t
		gulp "${taskName}Dev", {
			dependsOn 'gulp_permanent'
			inputs.dir("src/main/${taskName}").withPathSensitivity(PathSensitivity.RELATIVE)
			if (taskName == 'scripts') {
				inputs.file('tsconfig.json').withPathSensitivity(PathSensitivity.RELATIVE)
			}
			outputs.dir("src/main/resources/assets-dev/${taskName}")
		}
		gulp "${taskName}Prod", {
			dependsOn 'gulp_permanent'
			inputs.dir("src/main/${taskName}").withPathSensitivity(PathSensitivity.RELATIVE)
			if (taskName == 'scripts') {
				inputs.file('tsconfig.json').withPathSensitivity(PathSensitivity.RELATIVE)
			}
			outputs.dir("src/main/resources/assets/${taskName}")

		}
	}
	gulp 'revProd', {
		dependsOn 'gulp_stylesProd', 'gulp_scriptsProd'
		inputs.file('src/main/resources/assets/styles/manifest.json').withPathSensitivity(PathSensitivity.RELATIVE)
		inputs.file('src/main/resources/assets/scripts/manifest.json').withPathSensitivity(PathSensitivity.RELATIVE)
		outputs.file('src/main/resources/assets/manifest.json')
	}
}
clean {
	delete 'src/main/resources/assets'
	delete 'src/main/resources/assets-dev'
}

// hook the gradle defaults into our npm tasks
tasks.named('test') {
	dependsOn 'npm_run_test_ci'
}
tasks.named('check') {
	dependsOn 'test'
}
tasks.named('processResources') {
	dependsOn 'gulp_stylesDev', 'gulp_scriptsDev', 'gulp_revProd'
}

// on Heroku, we can ignore the dev tasks
if (buildsrc.Env.isHeroku()) {
	gulp_stylesDev.enabled = false
	gulp_scriptsDev.enabled = false
}
gradle.taskGraph.whenReady { taskGraph ->
	boolean disableProd = false
	if (taskGraph.hasTask(':server:runDev')) {
		disableProd = true
	}
	if (taskGraph.hasTask(':server:live')) {
		disableProd = true
		gulp_scriptsDev.enabled = false
	}
	if (disableProd) {
		gulp_revProd.enabled = false
		gulp_stylesProd.enabled = false
		gulp_scriptsProd.enabled = false
	}
}
