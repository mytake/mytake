/*
 * MyTake.org website and tooling.
 * Copyright (C) 2020 MyTake.org, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact us at team@mytake.org
 */
import React from "react";
import * as renderer from "react-test-renderer";
import { FoundationHarness } from "../../common/foundationTest";
import {
  SearchMode,
  SearchResult,
  _searchImpl,
  _SearchWithData,
} from "./search";
// this data is generated by server/src/test/java/controllers/LucenePlayground.java
import socialSecuritySearchResults from "./testData/socialSecuritySearchResults.json";
import wallSearchResults from "./testData/wallSearchResults.json";
import { VideoResultProps } from "./VideoResult";
import { VideoResultsList } from "./VideoResultsList";

jest.mock("./NGramViewer", () => ({
  __esModule: true,
  default: (props: SearchResult) => {
    return <div>NGramViewer: {props.searchQuery}</div>;
  },
}));

jest.mock("../VideoLite", () => ({
  __esModule: true,
  default: "VideoLite",
}));

jest.mock("./SearchRadioButtons", () => ({
  __esModule: true,
  default: "SearchRadioButtons",
}));

jest.mock("./VideoResult", () => ({
  __esModule: true,
  default: (props: VideoResultProps) => {
    const { searchHit } = props;
    return (
      <div>
        VideoResult: {searchHit.videoFact.youtubeId} {searchHit.turn}{" "}
        {searchHit.hitOffsets}
      </div>
    );
  },
}));

test("VideoResultsList social security", () => {
  const result = _searchImpl(
    new _SearchWithData(
      "social security",
      socialSecuritySearchResults.facts,
      FoundationHarness.loadAllFromDisk(),
      SearchMode.BeforeAndAfter
    )
  );

  const tree = renderer
    .create(
      new VideoResultsList({
        mode: SearchMode.BeforeAndAfter,
        onModeChange: jest.fn(),
        searchResult: result,
      }).render()
    )
    .toJSON();
  expect(tree).toMatchSnapshot();
});

test("VideoResultsList no results", () => {
  const result = _searchImpl(
    new _SearchWithData(
      "gibberish",
      [],
      FoundationHarness.loadAllFromDisk(),
      SearchMode.BeforeAndAfter
    )
  );
  const tree = renderer
    .create(
      new VideoResultsList({
        mode: SearchMode.BeforeAndAfter,
        onModeChange: jest.fn(),
        searchResult: result,
      }).render()
    )
    .toJSON();
  expect(tree).toMatchSnapshot();
});

test("VideoResultsList wall, -wall street", () => {
  const result = _searchImpl(
    new _SearchWithData(
      "wall, -wall street",
      wallSearchResults.facts,
      FoundationHarness.loadAllFromDisk(),
      SearchMode.BeforeAndAfter
    )
  );

  const tree = renderer
    .create(
      new VideoResultsList({
        mode: SearchMode.BeforeAndAfter,
        onModeChange: jest.fn(),
        searchResult: result,
      }).render()
    )
    .toJSON();
  expect(tree).toMatchSnapshot();
});
