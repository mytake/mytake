/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Keys;
import db.Public;
import db.tables.records.BookmarksModRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookmarksMod extends TableImpl<BookmarksModRecord> {

    private static final long serialVersionUID = -541865704;

    /**
     * The reference instance of <code>public.bookmarks_mod</code>
     */
    public static final BookmarksMod BOOKMARKS_MOD = new BookmarksMod();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookmarksModRecord> getRecordType() {
        return BookmarksModRecord.class;
    }

    /**
     * The column <code>public.bookmarks_mod.saved_by</code>.
     */
    public final TableField<BookmarksModRecord, Integer> SAVED_BY = createField(DSL.name("saved_by"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.bookmarks_mod.last_mod</code>.
     */
    public final TableField<BookmarksModRecord, LocalDateTime> LAST_MOD = createField(DSL.name("last_mod"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.bookmarks_mod</code> table reference
     */
    public BookmarksMod() {
        this(DSL.name("bookmarks_mod"), null);
    }

    /**
     * Create an aliased <code>public.bookmarks_mod</code> table reference
     */
    public BookmarksMod(String alias) {
        this(DSL.name(alias), BOOKMARKS_MOD);
    }

    /**
     * Create an aliased <code>public.bookmarks_mod</code> table reference
     */
    public BookmarksMod(Name alias) {
        this(alias, BOOKMARKS_MOD);
    }

    private BookmarksMod(Name alias, Table<BookmarksModRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookmarksMod(Name alias, Table<BookmarksModRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BookmarksMod(Table<O> child, ForeignKey<O, BookmarksModRecord> key) {
        super(child, key, BOOKMARKS_MOD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<BookmarksModRecord> getPrimaryKey() {
        return Keys.BOOKMARKS_MOD_PKEY;
    }

    @Override
    public List<UniqueKey<BookmarksModRecord>> getKeys() {
        return Arrays.<UniqueKey<BookmarksModRecord>>asList(Keys.BOOKMARKS_MOD_PKEY);
    }

    @Override
    public List<ForeignKey<BookmarksModRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BookmarksModRecord, ?>>asList(Keys.BOOKMARKS_MOD__BOOKMARKS_MOD_SAVED_BY_FKEY);
    }

    public Account account() {
        return new Account(this, Keys.BOOKMARKS_MOD__BOOKMARKS_MOD_SAVED_BY_FKEY);
    }

    @Override
    public BookmarksMod as(String alias) {
        return new BookmarksMod(DSL.name(alias), this);
    }

    @Override
    public BookmarksMod as(Name alias) {
        return new BookmarksMod(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookmarksMod rename(String name) {
        return new BookmarksMod(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookmarksMod rename(Name name) {
        return new BookmarksMod(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, LocalDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
