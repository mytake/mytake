/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Keys;
import db.Public;
import db.tables.records.FoundationRevRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FoundationRev extends TableImpl<FoundationRevRecord> {

    private static final long serialVersionUID = 1534768364;

    /**
     * The reference instance of <code>public.foundation_rev</code>
     */
    public static final FoundationRev FOUNDATION_REV = new FoundationRev();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FoundationRevRecord> getRecordType() {
        return FoundationRevRecord.class;
    }

    /**
     * The column <code>public.foundation_rev.version</code>.
     */
    public final TableField<FoundationRevRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.foundation_rev.description</code>.
     */
    public final TableField<FoundationRevRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.foundation_rev.migrated_on</code>.
     */
    public final TableField<FoundationRevRecord, LocalDateTime> MIGRATED_ON = createField(DSL.name("migrated_on"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.foundation_rev.execution_time_sec</code>.
     */
    public final TableField<FoundationRevRecord, Integer> EXECUTION_TIME_SEC = createField(DSL.name("execution_time_sec"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.foundation_rev</code> table reference
     */
    public FoundationRev() {
        this(DSL.name("foundation_rev"), null);
    }

    /**
     * Create an aliased <code>public.foundation_rev</code> table reference
     */
    public FoundationRev(String alias) {
        this(DSL.name(alias), FOUNDATION_REV);
    }

    /**
     * Create an aliased <code>public.foundation_rev</code> table reference
     */
    public FoundationRev(Name alias) {
        this(alias, FOUNDATION_REV);
    }

    private FoundationRev(Name alias, Table<FoundationRevRecord> aliased) {
        this(alias, aliased, null);
    }

    private FoundationRev(Name alias, Table<FoundationRevRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FoundationRev(Table<O> child, ForeignKey<O, FoundationRevRecord> key) {
        super(child, key, FOUNDATION_REV);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<FoundationRevRecord> getPrimaryKey() {
        return Keys.FOUNDATION_REV_PKEY;
    }

    @Override
    public List<UniqueKey<FoundationRevRecord>> getKeys() {
        return Arrays.<UniqueKey<FoundationRevRecord>>asList(Keys.FOUNDATION_REV_PKEY);
    }

    @Override
    public FoundationRev as(String alias) {
        return new FoundationRev(DSL.name(alias), this);
    }

    @Override
    public FoundationRev as(Name alias) {
        return new FoundationRev(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FoundationRev rename(String name) {
        return new FoundationRev(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FoundationRev rename(Name name) {
        return new FoundationRev(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
