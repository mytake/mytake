/*
 * This file is generated by jOOQ.
*/
package db.tables;


import db.Keys;
import db.Public;
import db.bindings.PostgresInetBinding;
import db.tables.records.SharedFactsRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SharedFacts extends TableImpl<SharedFactsRecord> {

    private static final long serialVersionUID = -231576228;

    /**
     * The reference instance of <code>public.shared_facts</code>
     */
    public static final SharedFacts SHARED_FACTS = new SharedFacts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SharedFactsRecord> getRecordType() {
        return SharedFactsRecord.class;
    }

    /**
     * The column <code>public.shared_facts.shared_by</code>.
     */
    public final TableField<SharedFactsRecord, Integer> SHARED_BY = createField("shared_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.shared_facts.shared_on</code>.
     */
    public final TableField<SharedFactsRecord, Timestamp> SHARED_ON = createField("shared_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.shared_facts.shared_ip</code>.
     */
    public final TableField<SharedFactsRecord, String> SHARED_IP = createField("shared_ip", org.jooq.impl.DefaultDataType.getDefaultDataType("inet"), this, "", new PostgresInetBinding());

    /**
     * The column <code>public.shared_facts.view_count</code>.
     */
    public final TableField<SharedFactsRecord, Integer> VIEW_COUNT = createField("view_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.shared_facts.title</code>.
     */
    public final TableField<SharedFactsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.shared_facts.url_version</code>.
     */
    public final TableField<SharedFactsRecord, Integer> URL_VERSION = createField("url_version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.shared_facts.factid</code>.
     */
    public final TableField<SharedFactsRecord, String> FACTID = createField("factid", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.shared_facts.highlight_start</code>.
     */
    public final TableField<SharedFactsRecord, BigDecimal> HIGHLIGHT_START = createField("highlight_start", org.jooq.impl.SQLDataType.NUMERIC(8, 3), this, "");

    /**
     * The column <code>public.shared_facts.highlight_end</code>.
     */
    public final TableField<SharedFactsRecord, BigDecimal> HIGHLIGHT_END = createField("highlight_end", org.jooq.impl.SQLDataType.NUMERIC(8, 3), this, "");

    /**
     * The column <code>public.shared_facts.view_start</code>.
     */
    public final TableField<SharedFactsRecord, BigDecimal> VIEW_START = createField("view_start", org.jooq.impl.SQLDataType.NUMERIC(8, 3), this, "");

    /**
     * The column <code>public.shared_facts.view_end</code>.
     */
    public final TableField<SharedFactsRecord, BigDecimal> VIEW_END = createField("view_end", org.jooq.impl.SQLDataType.NUMERIC(8, 3), this, "");

    /**
     * Create a <code>public.shared_facts</code> table reference
     */
    public SharedFacts() {
        this(DSL.name("shared_facts"), null);
    }

    /**
     * Create an aliased <code>public.shared_facts</code> table reference
     */
    public SharedFacts(String alias) {
        this(DSL.name(alias), SHARED_FACTS);
    }

    /**
     * Create an aliased <code>public.shared_facts</code> table reference
     */
    public SharedFacts(Name alias) {
        this(alias, SHARED_FACTS);
    }

    private SharedFacts(Name alias, Table<SharedFactsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SharedFacts(Name alias, Table<SharedFactsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SharedFactsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SharedFactsRecord, ?>>asList(Keys.SHARED_FACTS__SHARED_FACTS_SHARED_BY_FKEY, Keys.SHARED_FACTS__SHARED_FACTS_URL_VERSION_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedFacts as(String alias) {
        return new SharedFacts(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedFacts as(Name alias) {
        return new SharedFacts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedFacts rename(String name) {
        return new SharedFacts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedFacts rename(Name name) {
        return new SharedFacts(name, null);
    }
}
