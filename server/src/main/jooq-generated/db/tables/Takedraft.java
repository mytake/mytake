/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Keys;
import db.Public;
import db.tables.records.TakedraftRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Takedraft extends TableImpl<TakedraftRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.takedraft</code>
     */
    public static final Takedraft TAKEDRAFT = new Takedraft();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TakedraftRecord> getRecordType() {
        return TakedraftRecord.class;
    }

    /**
     * The column <code>public.takedraft.id</code>.
     */
    public final TableField<TakedraftRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.takedraft.user_id</code>.
     */
    public final TableField<TakedraftRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.takedraft.last_revision</code>.
     */
    public final TableField<TakedraftRecord, Integer> LAST_REVISION = createField(DSL.name("last_revision"), SQLDataType.INTEGER.nullable(false), this, "");

    private Takedraft(Name alias, Table<TakedraftRecord> aliased) {
        this(alias, aliased, null);
    }

    private Takedraft(Name alias, Table<TakedraftRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.takedraft</code> table reference
     */
    public Takedraft(String alias) {
        this(DSL.name(alias), TAKEDRAFT);
    }

    /**
     * Create an aliased <code>public.takedraft</code> table reference
     */
    public Takedraft(Name alias) {
        this(alias, TAKEDRAFT);
    }

    /**
     * Create a <code>public.takedraft</code> table reference
     */
    public Takedraft() {
        this(DSL.name("takedraft"), null);
    }

    public <O extends Record> Takedraft(Table<O> child, ForeignKey<O, TakedraftRecord> key) {
        super(child, key, TAKEDRAFT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TakedraftRecord, Integer> getIdentity() {
        return (Identity<TakedraftRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TakedraftRecord> getPrimaryKey() {
        return Keys.TAKEDRAFT_PKEY;
    }

    @Override
    public List<UniqueKey<TakedraftRecord>> getKeys() {
        return Arrays.<UniqueKey<TakedraftRecord>>asList(Keys.TAKEDRAFT_PKEY);
    }

    @Override
    public List<ForeignKey<TakedraftRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TakedraftRecord, ?>>asList(Keys.TAKEDRAFT__TAKEDRAFT_USER_ID_FKEY, Keys.TAKEDRAFT__TAKEDRAFT_LAST_REVISION_FKEY);
    }

    private transient Account _account;
    private transient Takerevision _takerevision;

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.TAKEDRAFT__TAKEDRAFT_USER_ID_FKEY);

        return _account;
    }

    public Takerevision takerevision() {
        if (_takerevision == null)
            _takerevision = new Takerevision(this, Keys.TAKEDRAFT__TAKEDRAFT_LAST_REVISION_FKEY);

        return _takerevision;
    }

    @Override
    public Takedraft as(String alias) {
        return new Takedraft(DSL.name(alias), this);
    }

    @Override
    public Takedraft as(Name alias) {
        return new Takedraft(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Takedraft rename(String name) {
        return new Takedraft(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Takedraft rename(Name name) {
        return new Takedraft(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
