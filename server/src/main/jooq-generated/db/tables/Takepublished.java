/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Indexes;
import db.Keys;
import db.Public;
import db.bindings.PostgresInetBinding;
import db.tables.records.TakepublishedRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Takepublished extends TableImpl<TakepublishedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.takepublished</code>
     */
    public static final Takepublished TAKEPUBLISHED = new Takepublished();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TakepublishedRecord> getRecordType() {
        return TakepublishedRecord.class;
    }

    /**
     * The column <code>public.takepublished.id</code>.
     */
    public final TableField<TakepublishedRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.takepublished.user_id</code>.
     */
    public final TableField<TakepublishedRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.takepublished.title</code>.
     */
    public final TableField<TakepublishedRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.takepublished.title_slug</code>.
     */
    public final TableField<TakepublishedRecord, String> TITLE_SLUG = createField(DSL.name("title_slug"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.takepublished.blocks</code>.
     */
    public final TableField<TakepublishedRecord, JSONB> BLOCKS = createField(DSL.name("blocks"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.takepublished.published_at</code>.
     */
    public final TableField<TakepublishedRecord, LocalDateTime> PUBLISHED_AT = createField(DSL.name("published_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.takepublished.published_ip</code>.
     */
    public final TableField<TakepublishedRecord, String> PUBLISHED_IP = createField(DSL.name("published_ip"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\"").nullable(false), this, "", new PostgresInetBinding());

    /**
     * The column <code>public.takepublished.deleted_at</code>.
     */
    public final TableField<TakepublishedRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.takepublished.deleted_ip</code>.
     */
    public final TableField<TakepublishedRecord, String> DELETED_IP = createField(DSL.name("deleted_ip"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "", new PostgresInetBinding());

    /**
     * The column <code>public.takepublished.count_view</code>.
     */
    public final TableField<TakepublishedRecord, Integer> COUNT_VIEW = createField(DSL.name("count_view"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.takepublished.count_like</code>.
     */
    public final TableField<TakepublishedRecord, Integer> COUNT_LIKE = createField(DSL.name("count_like"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.takepublished.count_bookmark</code>.
     */
    public final TableField<TakepublishedRecord, Integer> COUNT_BOOKMARK = createField(DSL.name("count_bookmark"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.takepublished.count_spam</code>.
     */
    public final TableField<TakepublishedRecord, Integer> COUNT_SPAM = createField(DSL.name("count_spam"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.takepublished.count_illegal</code>.
     */
    public final TableField<TakepublishedRecord, Integer> COUNT_ILLEGAL = createField(DSL.name("count_illegal"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.takepublished.image_url</code>.
     */
    public final TableField<TakepublishedRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    private Takepublished(Name alias, Table<TakepublishedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Takepublished(Name alias, Table<TakepublishedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.takepublished</code> table reference
     */
    public Takepublished(String alias) {
        this(DSL.name(alias), TAKEPUBLISHED);
    }

    /**
     * Create an aliased <code>public.takepublished</code> table reference
     */
    public Takepublished(Name alias) {
        this(alias, TAKEPUBLISHED);
    }

    /**
     * Create a <code>public.takepublished</code> table reference
     */
    public Takepublished() {
        this(DSL.name("takepublished"), null);
    }

    public <O extends Record> Takepublished(Table<O> child, ForeignKey<O, TakepublishedRecord> key) {
        super(child, key, TAKEPUBLISHED);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAKEPUBLISHED_TITLE_USER);
    }

    @Override
    public Identity<TakepublishedRecord, Integer> getIdentity() {
        return (Identity<TakepublishedRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TakepublishedRecord> getPrimaryKey() {
        return Keys.TAKEPUBLISHED_PKEY;
    }

    @Override
    public List<UniqueKey<TakepublishedRecord>> getKeys() {
        return Arrays.<UniqueKey<TakepublishedRecord>>asList(Keys.TAKEPUBLISHED_PKEY);
    }

    @Override
    public List<ForeignKey<TakepublishedRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TakepublishedRecord, ?>>asList(Keys.TAKEPUBLISHED__TAKEPUBLISHED_USER_ID_FKEY);
    }

    private transient Account _account;

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.TAKEPUBLISHED__TAKEPUBLISHED_USER_ID_FKEY);

        return _account;
    }

    @Override
    public Takepublished as(String alias) {
        return new Takepublished(DSL.name(alias), this);
    }

    @Override
    public Takepublished as(Name alias) {
        return new Takepublished(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Takepublished rename(String name) {
        return new Takepublished(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Takepublished rename(Name name) {
        return new Takepublished(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, Integer, String, String, JSONB, LocalDateTime, String, LocalDateTime, String, Integer, Integer, Integer, Integer, Integer, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
