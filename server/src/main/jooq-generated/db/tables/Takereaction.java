/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Keys;
import db.Public;
import db.bindings.PostgresInetBinding;
import db.enums.Reaction;
import db.tables.records.TakereactionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Takereaction extends TableImpl<TakereactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.takereaction</code>
     */
    public static final Takereaction TAKEREACTION = new Takereaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TakereactionRecord> getRecordType() {
        return TakereactionRecord.class;
    }

    /**
     * The column <code>public.takereaction.take_id</code>.
     */
    public final TableField<TakereactionRecord, Integer> TAKE_ID = createField(DSL.name("take_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.takereaction.user_id</code>.
     */
    public final TableField<TakereactionRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.takereaction.kind</code>.
     */
    public final TableField<TakereactionRecord, Reaction> KIND = createField(DSL.name("kind"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(db.enums.Reaction.class), this, "");

    /**
     * The column <code>public.takereaction.reacted_at</code>.
     */
    public final TableField<TakereactionRecord, LocalDateTime> REACTED_AT = createField(DSL.name("reacted_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.takereaction.reacted_ip</code>.
     */
    public final TableField<TakereactionRecord, String> REACTED_IP = createField(DSL.name("reacted_ip"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\"").nullable(false), this, "", new PostgresInetBinding());

    private Takereaction(Name alias, Table<TakereactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Takereaction(Name alias, Table<TakereactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.takereaction</code> table reference
     */
    public Takereaction(String alias) {
        this(DSL.name(alias), TAKEREACTION);
    }

    /**
     * Create an aliased <code>public.takereaction</code> table reference
     */
    public Takereaction(Name alias) {
        this(alias, TAKEREACTION);
    }

    /**
     * Create a <code>public.takereaction</code> table reference
     */
    public Takereaction() {
        this(DSL.name("takereaction"), null);
    }

    public <O extends Record> Takereaction(Table<O> child, ForeignKey<O, TakereactionRecord> key) {
        super(child, key, TAKEREACTION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TakereactionRecord> getPrimaryKey() {
        return Keys.TAKEREACTION_PKEY;
    }

    @Override
    public List<UniqueKey<TakereactionRecord>> getKeys() {
        return Arrays.<UniqueKey<TakereactionRecord>>asList(Keys.TAKEREACTION_PKEY);
    }

    @Override
    public List<ForeignKey<TakereactionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TakereactionRecord, ?>>asList(Keys.TAKEREACTION__TAKEREACTION_TAKE_ID_FKEY, Keys.TAKEREACTION__TAKEREACTION_USER_ID_FKEY);
    }

    private transient Takepublished _takepublished;
    private transient Account _account;

    public Takepublished takepublished() {
        if (_takepublished == null)
            _takepublished = new Takepublished(this, Keys.TAKEREACTION__TAKEREACTION_TAKE_ID_FKEY);

        return _takepublished;
    }

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.TAKEREACTION__TAKEREACTION_USER_ID_FKEY);

        return _account;
    }

    @Override
    public Takereaction as(String alias) {
        return new Takereaction(DSL.name(alias), this);
    }

    @Override
    public Takereaction as(Name alias) {
        return new Takereaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Takereaction rename(String name) {
        return new Takereaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Takereaction rename(Name name) {
        return new Takereaction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Reaction, LocalDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
